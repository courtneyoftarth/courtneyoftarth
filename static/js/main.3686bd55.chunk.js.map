{"version":3,"sources":["Graph.js","Tweets.js","StocksPage.js","App.js","serviceWorker.js","index.js"],"names":["Graph","TweetsGrid","styled","table","TweetMessage","td","TweetLikes","TweetRow","tr","Tweets","useState","tweets","setTweets","useEffect","a","async","axios","get","params","access_token","window","location","hash","split","symbols","response","console","log","data","messages","map","body","likes","total","Wrapper","div","HeadingArea","GraphArea","TweetsArea","StocksPage","App","href","includes","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAUeA,EARD,WACV,OACI,6BACI,6C,qYCDZ,IAAMC,EAAaC,IAAOC,MAAV,KAIVC,EAAeF,IAAOG,GAAV,KAIZC,EAAaJ,IAAOG,GAAV,KAIVE,EAAWL,IAAOM,GAAV,KAoCCC,EAhCA,WAAO,IAAD,EACWC,mBAAS,IADpB,mBACVC,EADU,KACFC,EADE,KAgBjB,OAbAC,qBAAU,YACN,WAAC,QAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAC0BE,IAAMC,IAAI,wDAAyD,CACtFC,OAAQ,CACJC,aAAcC,OAAOC,SAASC,KAAKC,MAAM,KAAK,GAC9CC,QAAS,gBAJpB,OACSC,EADT,OAOGC,QAAQC,IAAIF,EAASG,KAAKC,UAC1BjB,EAAUa,EAASG,KAAKC,UAAY,IARvC,qCAAD,KAUD,IAGC,6BACI,mEACA,kBAAC5B,EAAD,KACKU,EAAOmB,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAT,OACR,kBAACzB,EAAD,KACI,kBAACH,EAAD,oBAAiB2B,GACjB,kBAACzB,EAAD,eAAe0B,GAASA,EAAMC,OAAS,U,8oBCtC/D,IAAMC,EAAUhC,IAAOiC,IAAV,KAePC,EAAclC,IAAOiC,IAAV,KAKXE,EAAYnC,YAAOF,EAAPE,CAAH,KAIToC,EAAapC,YAAOO,EAAPP,CAAH,KAcDqC,EAVI,kBACf,kBAACL,EAAD,KACI,kBAACE,EAAD,KACI,mDAEJ,kBAACC,EAAD,MACA,kBAACC,EAAD,QCvBOE,MAbf,WAUE,OARKpB,OAAOC,SAASoB,KAAKC,SAAS,YACjCtB,OAAOC,SAASoB,KAAO,iPAOlB,kBAAC,EAAD,OCDWE,QACW,cAA7BvB,OAAOC,SAASuB,UAEe,UAA7BxB,OAAOC,SAASuB,UAEhBxB,OAAOC,SAASuB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3686bd55.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Graph = () => {\r\n    return (\r\n        <div>\r\n            <h2>Performance</h2>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Graph;\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\n\r\nconst TweetsGrid = styled.table`\r\n    max-width: 500px;\r\n`;\r\n\r\nconst TweetMessage = styled.td`\r\n    padding: 20px;\r\n`;\r\n\r\nconst TweetLikes = styled.td`\r\n    width: 100px;\r\n`;\r\n\r\nconst TweetRow = styled.tr`\r\n\r\n`;\r\n\r\nconst Tweets = () => {\r\n    const [tweets, setTweets] = useState([]);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const response = await axios.get('https://api.stocktwits.com/api/2/streams/symbols.json', {\r\n                params: {\r\n                    access_token: window.location.hash.split('=')[1],\r\n                    symbols: 'AAPL,MSFT'\r\n                }\r\n            });\r\n            console.log(response.data.messages);\r\n            setTweets(response.data.messages || []);\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h2>Tweets about stocks you're tracking</h2>\r\n            <TweetsGrid>\r\n                {tweets.map(({ body, likes }) => (\r\n                    <TweetRow>\r\n                        <TweetMessage>üó®{body}</TweetMessage>\r\n                        <TweetLikes>‚ù§ {likes && likes.total || 0}</TweetLikes>\r\n                    </TweetRow>\r\n                ))}\r\n            </TweetsGrid>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Tweets;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Graph from './Graph';\r\nimport Tweets from './Tweets';\r\n\r\nconst Wrapper = styled.div`\r\n    display: grid;\r\n\r\n    grid-template-areas:\r\n        \"HeadingArea HeadingArea\";\r\n        \"GraphArea TweetsArea\";\r\n\r\n    grid-template-columns: 60% 40%;\r\n    grid-template-rows: auto 600px;\r\n\r\n    width: 80%;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n`;\r\n\r\nconst HeadingArea = styled.div`\r\n    grid-area: HeadingArea;\r\n    text-align: center;\r\n`;\r\n\r\nconst GraphArea = styled(Graph)`\r\n    grid-area: GraphArea;\r\n`;\r\n\r\nconst TweetsArea = styled(Tweets)`\r\n    grid-area: TweetsArea;\r\n`;\r\n\r\nconst StocksPage = () => (\r\n    <Wrapper>\r\n        <HeadingArea>\r\n            <h1>Internet of Stocks</h1>\r\n        </HeadingArea>\r\n        <GraphArea />\r\n        <TweetsArea />\r\n    </Wrapper>\r\n);\r\n\r\nexport default StocksPage;\r\n","import React from 'react';\nimport StocksPage from './StocksPage';\n\nfunction App() {\n\n  if (!window.location.href.includes('access')) {\n    window.location.href = 'https://api.stocktwits.com/api/2/oauth/authorize/?' +\n      'client_id=a15329c01d369560' +\n      '&response_type=token' + \n      '&redirect_uri=https://courtneyoftarth.github.io/stocks' + \n      '&scope=read,watch_lists,publish_messages,publish_watch_lists,follow_users,follow_stocks';\n  }\n    \n  return <StocksPage />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}